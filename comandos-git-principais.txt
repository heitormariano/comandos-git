Comandos abordados no curso de Git do Rodrigo Branas

---------------------------------- Introdução -----------------------------------

Verificar a versão do git
# git version
# outro comando: git --version

Criação de um repositório (local) vazio
# git init

Mostrar estrutura de pastas
# tree .git

Obs.: O comando tree funciona no cmd (windows). No bash do git o comando não é reconhecido
Obs02.: No Ubuntu 18.04 (em meu pc) foi necessário realizar a instalação do tree (comando sudo apt install tree, por exemplo)

Realizar commit (exemplo)

-> Criando arquivos e seus conteúdos
# echo a > a.txt
# echo b > b.txt

Adicionar arquivos para a staging area (o container para os arquivos que serão enviados para o respositório)

# git add <nome_arquivo>
Exemplo:
# git add a.txt

Adicionar todos os arquivos que estão fora do container (não rastreados, fora da staging area)

# git add -A (ou git add --all ou git add .)

Olhar o container (saber quais são os arquivos não rastreados, visualizar aqueles que já foram adicionados, etc)

# git status

Realizar o commit (enviar arquivos para o repositório) com uma mensagem

# git commit -m "mensagem_desejada"

Ver os commits realizados (verificar a lista de commits)
# git log

visualizar os commits de forma mais organizada (em um linha)
# git log --oneline


---------------------------------- Branches e Merge -----------------------------------

Verificar as Branches
# git branch

Branch padrão: master (sempre aponta para o último commit)

Criar uma branch
# git branch <nome_branch>
Exemplo: 
# git branch feature01

-> Branches são referências (ponteiros) para determinado commit


Analisar as referências de cada branch
Exemplo:
# cat .git/refs/heads/master
# cat .git/refs/heads/feature01

Fazer a visualização dos commits e branches
# git log --oneline --decorate

Também é possível saber a branch apontada pelo HEAD
Obs.: O HEAD indica onde estamos (local de trabalho)
Obs2.: A evolução do código (sequência de commits) segue a partir do local apontado por Head

Exemplo:
# cat .git/HEAD

Fazer a mudança de branch (realizar o "chaveamento" para uma branch)
# git checkout feature01

[operações que podem ser realizadas após a criação da branch]
# echo 'teste' > teste.txt

# git add -A
# git commit -m "incluindo novo arquivo"

Caso o programador esteja em um branch "anterior" é necessário usar o seguinte comando para visualizar os commits que estão "adiante"
# git log --oneline --decorate --all

Realizar o merge (ex.: merge no master)
# git merge <nome_branch> (Ao realizar o merge, todas as modificações presentes na branch especificada são "unidas", "transferidas" para a branch corrente)

Situação: HEAD está apontando para master (em outras palavras, master é a branch corrente, a branch em uso). E master está "atrás" de feature01 (essa branch está com as atualizações necessárias para master)

-> Comando (exemplo)
# git merge feature01

Mensagem após o comando: fast-foward[avanço rápido] (Ocorre apenas se não existirem divergências entre os branches.Consiste em uma atualização de referência. "Caminho feliz")

Excluir branch
# git branch -d <nome_branch>
# git branch -d feature01

Realizar o checkout (mudança de branch. O HEAD apontará para a branch desejada) e criar uma branch ao mesmo tempo
# git checkout -b feature02

-> Situação: em master é criado um arquivo e em feature02 é criado outro. Nesse caso, temos duas branches com arquivos distintos (uma divergência é percebida. Lembrando que divergência é diferente de conflito. Divergência = "seguir um caminho diferente")

Visualizar os caminhos dos commits (uma visão "mais gráfica") e identificar divergências
# git log --oneline --decorate --all --graph

Comando para realizar o merge de master (branch em uso) com a branch feature02
# git merge feature02

Obs: Recursive strategy -> usada quando existe divergência entre branches e se faz necessário a realização de um novo commit para uni-las (O commit é realizado automaticamente).

Excluir branch feature02 (Exemplo de situação: os trabalhos na branch foram concluídos e ela não é mais necessária)
# git branch -d feature02

-> Lidar com conflitos

Situação: um mesmo arquivo é criado para dois branches (master e feature03), mas o conteúdo dele é diferente em cada branch.

# git checkout -b feature03
# echo g2 > g.txt (criação do arquivo g.txt com conteúdo "g2")


-> Comandos de adição de arquivo e commit

Mudança para a branch master
# git checkout master

Inclusão de arquivo g.txt com conteúdo diferente
# echo g1 > g.txt

-> Comandos de inclusão do arquivo e commit
Reforçando: Nesse ponto existem duas ramificações (branches) que possuem o mesmo arquivo, mas o conteúdo dele é distinto em cada branch. CONFLITO GERADO!

Realizando o merge
# git merge feature03

(mensagem é exibida informando que o conflito precisa ser resolvido, ou seja, é preciso escolher o conteúdo desejado para o arquivo. Depois o commit pode ser feito)

# git status

Resolver conflito
# vim g.txt
(editar arquivo mantendo o conteúdo desejado)

-> Fazer a inclusão do arquivo na staging area e commit

# git log --oneline --decorate --all --graph
Obs.: É indicado o merge realizado

Excluir a feature03 (ela não será necessária)
# git branch -d feature03

---------------------------------- Stash -----------------------------------------

Mover arquivos adicionados ou modificados (porém, não "commitados") para uma área chamada stash

# comando original da aula: git stash save <texto_identificador>
# comando atual: git stash push -m "<mensagem>"

->Exemplo:
# git stash push -m "incluindo i.txt no stash"

Listagem dos conteúdos mantidos na stash

# git stash list

Aplicar as mudanças presentes em "stash" e não retirá-las da listagem original
# git stash appply <referência_listagem_stash>

Exemplo:
# git stash apply stash@{2}

Apagar as referências que estão em stash
# git stash drop <referência_listagem_stash>

Exemplo:
# git stash drop stash@{0}

Evitar a realização dos comandos apply e drop
# git stash pop (desempilha a última referência que está na lista. O comando realiza o apply e o drop ao mesmo tempo)

Criar uma nova branch a partir de um stash
# git stash branch feature05

---------------------------------------- Remote, pull e Push ---------------------------------

Comando "push" (empurrar, ação de atualizar uma referência remota a partir de uma referência local)

GitHub : plataforma de compartilhamento e hospedagem de código (no github podemos criar repositórios de código)

Criar um repositório remoto chamado "origin"
# git remote add origin <url_repositorio>

--> Exemplo:
# git remote add origin https://github.com/heitormariano/gitstudies.git

Conferir a presença do repositório
# git remote

Para ver mais detalhes sobre o repositório
# git remote -v

* Comando Push (Empurrar o "grafo de commits" para o origin a partir do master)
# git push origin master

* Comando Pull (puxar, ação de atualizar uma referência local a partir de uma referência remota)

Comando para puxar atualizações (Obs.: o pull realiza merge automaticamente. Caso não existam conflitos, funcionará sem problemas. Ocorre o "fast-forward")
# git pull origin master

Clonar o repositório [útil quando estamos realizando contribuições com um repositório remoto. Também usado quando desejamos realizar os comandos de envio (push) em determinado repositório e de obtenção de código atualizado (pull) em outro (dois repositórios são adotados)]

# git clone [URL_repositorio_remoto] [nome_repositorio(pasta)_diferente_se_desejar]

Obs.: Caso não seja especificado um nome diferente para o repositório (pasta), será criada uma pasta com o mesmo nome definido no repositório do GitHub.

Exemplo: 
# git clone https://github.com/heitormariano/gitstudies.git projeto2

Ver em detalhes os commits
# git log --oneline --decorate --all --graph

-- Situação:

# cd projeto2

# echo h > h.txt

# git add -A

# git commit -m "h.txt"

# git push origin master

# cd projeto

# git pull origin master

Comando Fetch

O fetch realiza o "pull pela metade" (traz atualizações, baixa os commits, arquivos e referências do repositório remoto para o respositório local. Não é feito merge de "master" com "orgin/master")

Importante: O comando ajuda a ver o que todo mundo está trabalhando (ajuda a visualizar mudanças presentes no repositório remoto e que não estão no repositório local)
-> Em outras palavras: a referência "origin/master" fica na frente de "master"

-- Situação:

# cd projeto2

# echo i > i.txt

# git add -A

# git commit -m "i.txt"

# git push origin master

-- Uso do comando fetch no repositório local (pasta) do projeto (Lembrando que a branch master é a que estará sendo usada)

# cd projeto

# git fetch

Obs.: nesse momento as atualizações são obtidas para a referência "origin/master". Essa referência fica à frente de "master". Usar comando "git log" para visualizar.

# git log --oneline --decorate --all --graph

Comando diff (verficar as diferenças entre as branchs)

-> Verificar as diferenças entre "master" e "origin/master")
# git diff master origin/master

Realizando o merge (considerando master como a branch corrente)
# git merge origin/master

-- Comentário: nesse caso o merge é realizado a partir de origin/master (referência do repositório remoto), uma vez que ele é o mais atual

Importante: Caso existam conflitos, será preciso, naturalmente, tratá-los antes de realizar o merge.
# git log --oneline --decorate --all --graph


-------------------------------------- Reset -----------------------------------------

Fluxo básico de criação e commit de um novo arquivo em master
# echo k > k.txt
# git status (ver status no projeto)
# git add -A

# git commit -m "arquivo k.txt"

# git status (nova verificação)

Como desfazer um commit realizado por engano?
Comando: git reset <commit>

Com o comando acima, realizamos uma mudança de referência. Podemos, por exemplo, indicar um commit anterior para master "apontar". O commit do arquivo k.txt não é excluído, mas passamos a ter uma nova referência para master (uma espécie de atualização de referência).

-> 3 modos de reset : soft, mixed (padrão), hard

-- soft

** git soft (ao realizar o reset, o arquivo que estava presente no commit ficará na staging area, pronto para ser "commitado" novamente se necessário)

Exemplo:
# git reset --soft 8f11 (8f11 é o início do hash do commit anterior)

verificação da árvore de commits
# git log --oneline --decorate --all --graph

obs_01: o commit do arquivo k.txt não aparece na listagem
obs_02: o arquivo k.txt é apresentado como um arquivo "staged" (pronto para ser "commitado")

-- mixed
Novo commit (commit para o arquivo k.txt)
# git commit -m "arquivo k.txt"

# git reset --mixed 8f11 (poderia ser apenas git reset 8f11. Isso devido o fato de o reset padrão ser o "mixed")

obs_01: o commit do arquivo k.txt não aparece na listagem (da mesma forma que testado com o git reset --soft <commit>)

obs_02: o arquivo k.txt é apresentado como "untracked". Em outras palavras, o arquivo não fica na staging area


-- hard
Incluir arquivo k.txt na staging area e depois "commitar"

git add .
git commit -m "arquivo k.txt"

Comando git reset --hard 8f11

-- Aparecerá uma mensagem semelhante a esta (relacionada a referência do HEAD)
HEAD is now at 8f11991 [texto do commit]

-- ao realizar o git status nenhum arquivo aparecerá (é como se o arquivo k.txt jamais existisse. A árvore de commits é "limpa" (fica no estado exato do commit indicado no reset).

Desfazer um reset
Situação: Apliquei o git reset, mas tenho interesse em desfazer a operação. 

Comandos:
# git reflog (armazena, por exemplo, as referências afetadas pelos resets)

# git reset --hard 1649 (o HEAD passará a referencia o commit indicado. Nesse exemplo, a referência é do commit do arquivo k.txt)

-- Aparecerá uma mensagem semelhante a esta:
HEAD is now at 1649e24 [mensagem commit]

Verificar presença do arquivo k.txt
# ls -la

-- Nova situação (envolvendo repositórios remotos)
-- Suponho que o push foi realizado é possível desfazer a atualização feita no repositório remoto? Sim, mas é recomendado adotar outras estratégias. Por exemplo, fazer um novo commit com correções e ajustes necessários. 

-- Normalmente não é possível realizar um push de uma "arvore de commits" que está "atrás" (behind) da "árvore de commits" existente no repositório remoto. Forma de entender: Tentar enviar para o repositório uma feature que apresenta incrementos/ajustes ausentes. E esses incrementos/ajustes, por sua vez, já tinham sido enviados anteriormente e, provavelmente, já estão em uso pela equipe de desenvolvimento. 
	* Atenção: cuidado com o reset de commits já enviados para o repositório remoto (adote outras soluções sempre que possível)


-- Na aula do Rodrigo Branas é exemplificado como "forçar" o reset no repositório remoto (novamente: é muito importante evitar isso, pois estamos compromenteno o "histórico" das atividades/implementação do projeto em questão)

Exemplo demonstrado na aula
-- atualização do respositório remoto
# git log --oneline --decorate --all --graph
# git push origin master

# git reset --hard 8f11

Tentativa de push tradicional
# git push origin master (aparecerá mensagem informando que a operação não pode ser feita)

Realizar push forçado
# git push origin master -f (ou --force)
